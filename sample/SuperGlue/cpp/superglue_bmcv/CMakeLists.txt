cmake_minimum_required(VERSION 3.10)
project(superglue)

# set(CMAKE_CXX_FLAGS "-O3")
set(CMAKE_BUILD_TYPE "Debug")
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})
message("cur dir: ${PROJECT_SOURCE_DIR}")

if (NOT DEFINED TARGET_ARCH)
    set(TARGET_ARCH pcie)
endif()

if (${TARGET_ARCH} STREQUAL "pcie")
    message( "${TARGET_ARCH} mode, starting......")
    # use ffmpeg
    set(FFMPEG_DIR  /opt/sophon/sophon-ffmpeg-latest/lib/cmake)
    find_package(FFMPEG REQUIRED)
    include_directories(${FFMPEG_INCLUDE_DIRS})
    link_directories(${FFMPEG_LIB_DIRS})
    # use opencv
    set(OpenCV_DIR  /opt/sophon/sophon-opencv-latest/lib/cmake/opencv4)
    find_package(OpenCV REQUIRED)
    include_directories(${OpenCV_INCLUDE_DIRS})
    link_directories(${OpenCV_LIB_DIRS})
    # use libbmrt libbmlib
    find_package(libsophon REQUIRED)
    include_directories(${LIBSOPHON_INCLUDE_DIRS})
    link_directories(${LIBSOPHON_LIB_DIRS})

    # use libtorch
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "../libtorch/")
    find_package(Torch REQUIRED QUIET)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 ${TORCH_CXX_FLAGS}")
    include_directories(${TORCH_INCLUDE_DIRS})
    link_directories(${TORCH_LIB_DIRS})
    message(${TORCH_LIBRARIES})

    include_directories(".")
    aux_source_directory(. SRC_FILES)
    add_executable(superglue_bmcv.pcie ${SRC_FILES})
    target_link_libraries(superglue_bmcv.pcie ${FFMPEG_LIBS} ${OpenCV_LIBS} ${TORCH_LIBRARIES} ${the_libbmlib.so} ${the_libbmrt.so} ${the_libbmcv.so} -lpthread)

elseif (${TARGET_ARCH} STREQUAL "soc")
    message( "${TARGET_ARCH} mode, starting......")
    set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
    set(CMAKE_ASM_COMPILER aarch64-linux-gnu-gcc)
    set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
    set(BM_LIBS bmlib bmrt bmcv yuv)
    set(OPENCV_LIBS opencv_imgproc opencv_core opencv_highgui opencv_imgcodecs opencv_videoio)
    include_directories("${SDK}/include/")
    include_directories("${SDK}/include/opencv4")
    link_directories("${SDK}/lib/")
    message("SDK: " ${SDK})

    # use libtorch
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "../aarch64_lib/libtorch")
    find_package(Torch REQUIRED QUIET)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
    include_directories(${TORCH_INCLUDE_DIRS})
    link_directories(${TORCH_LIB_DIRS})
    link_directories(../aarch64_lib/lib)
    message(${TORCH_LIBRARIES})
    message(${TORCH_CXX_FLAGS})

    include_directories(".")
    aux_source_directory(. SRC_FILES)
    add_executable(superglue_bmcv.soc ${SRC_FILES})
    target_link_libraries(superglue_bmcv.soc ${BM_LIBS} ${OPENCV_LIBS} ${TORCH_LIBRARIES} -lpthread -lavcodec -lavformat -lavutil)
else ()
    message( FATAL_ERROR  "not support mode, eg: soc/pcie, cur: ${TARGET_ARCH}")
endif ()
